Description: >
    In this exercise, you have been tasked with deploying a Linux server in a private subnet, 
    using the infrastructure that you created in a previous exercise. In the future, this machine 
    will be a web server that sits behind a load balancer, so it never needs to be public, as long as the Load Balancer can reach it.

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    VpcForServer: 
        Description: IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.0.0.0/16
    SubnetForServer: 
        Description: IP range (CIDR notation) for the private subnet
        Type: String
        Default: 10.0.0.0/24
    AMIForServer: 
        Description: AMI ID for the instance
        Type: String
        Default: 10.0.0.0/16

Resources:
  # IAM Role to allow EC2 Session Manager to access our server
  IAMRole: 
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # InstanceProfile will allow passing the IAM role to our server
  ServerInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Roles: 
        - !Ref IAMRole
  
  # Security group will allow inbound access through browser, inbound access through ssh(port 22) and outbound access through all port
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to the host and SSH from local only
      VpcId:
        Ref: VpcForServer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  # The ec2 instance
  Server: 
    Type: AWS::EC2::Instance
    Properties: 
      InstanceType: "t3.micro"
      ImageId: !Ref AMIForServer
      KeyName: "challenge3"
      IamInstanceProfile: !Ref ServerInstanceProfile
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet: 
          - Ref: ServerSecurityGroup
        SubnetId: 
          Ref: "SubnetForServer"